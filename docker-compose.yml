version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:80"
    environment:
      - VITE_API_BASE=http://localhost:8000
    depends_on:
      - backend
    networks:
      - recycle-app-network

  # Backend will be added here when ready
  backend:
    image: python:3.9-alpine
    ports:
      - "8000:8000"
    command: |
      sh -c "
        echo 'Backend not implemented yet. Install backend dependencies and run:';
        echo 'cd backend && pip install -r requirements.txt && uvicorn app.main:app --host 0.0.0.0 --port 8000';
        echo 'For now, creating a simple health check endpoint...';
        python -c \"
from http.server import HTTPServer, BaseHTTPRequestHandler
import json

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/ping':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps({'status': 'ok'}).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/classify':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            # Mock response
            response = {
                'material': 'Plastic-PET',
                'confidence': 0.85,
                'coinsEarned': 0.05
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

httpd = HTTPServer(('0.0.0.0', 8000), Handler)
print('Mock backend server running on port 8000...')
httpd.serve_forever()
\"
      "
    networks:
      - recycle-app-network

networks:
  recycle-app-network:
    driver: bridge 